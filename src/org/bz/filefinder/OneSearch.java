/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bz.filefinder;

import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.Reader;
import java.nio.channels.Channels;
import java.nio.channels.FileChannel;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author joseluisbz@gmail.com
 */
public class OneSearch extends JPanel {

  private static final Logger LOGGER = Logger.getLogger(OneSearch.class.getName());

  private final RulerComboBox usedFolders;
  private final RulerComboBox usedMatches;
  private final RulerComboBox usedWords;
  private static final String FS = System.getProperty("file.separator");
  public static final String NL = System.getProperty("line.separator");
  
  private final Font monoPlain12 = new Font("Monospaced", Font.PLAIN, 12);
  private final Font monoBold12 = monoPlain12.deriveFont(Font.BOLD);
  private final Color redColor = new Color(153, 0, 0);
  private final Color greenColor = new Color(0, 102, 0);
  private final Color blueColor = new Color(0, 0, 204);
  
  private SwingWorkerSearcher swSearcher;
  private final Searcher searcher = new Searcher();
  private final DefaultTableModel INITIAL_TABLE_MODEL = new DefaultTableModel(
      new Object[][]{},
      new String[]{"Path", "Name", "Date", /*"Kind", */ "Size"}
  );

  /**
   * Creates new form OneSearch
   */
  @SuppressWarnings({"unchecked"})
  public OneSearch() {
    usedFolders = new RulerComboBox();
    usedFolders.setEditable(true);

    usedMatches = new RulerComboBox();
    usedMatches.setEditable(true);

    usedWords = new RulerComboBox();
    usedWords.setEditable(true);

    initComponents();

    jtfPath.setEditable(false);
    jtfPath.setFont(new Font("Monospaced", Font.PLAIN, 9));
    treeLines.setEditable(true);
    treeLines.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
    treeErrors.setRootVisible(false);
    treeFiles.setRootVisible(false);
    treeLines.setRootVisible(false);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    panelSettings = new javax.swing.JPanel();
    panelFiles = new javax.swing.JPanel();
    labelMatch = new javax.swing.JLabel();
    addMatch = new javax.swing.JButton();
    freeMatches = new javax.swing.JComboBox<>();
    //javax.swing.JComboBox<RulerData> usedMatches = new RulerComboBox<>();
    delMatch = new javax.swing.JButton();
    panelFolders = new javax.swing.JPanel();
    labelFolder = new javax.swing.JLabel();
    addFolder = new javax.swing.JButton();
    freeFolders = new javax.swing.JComboBox<>();
    //javax.swing.JComboBox<RulerData> usedFolders = new javax.swing.JComboBox<>();
    delFolder = new javax.swing.JButton();
    panelWords = new javax.swing.JPanel();
    labelWord = new javax.swing.JLabel();
    addWord = new javax.swing.JButton();
    freeWords = new javax.swing.JComboBox<>();
    //javax.swing.JComboBox<RulerData> usedWords = new javax.swing.JComboBox<>();
    delWord = new javax.swing.JButton();
    panelSearch = new javax.swing.JPanel();
    buttonSearch = new javax.swing.JToggleButton();
    jtfPath = new javax.swing.JTextField();
    panelResults = new javax.swing.JPanel();
    splitPaneResults = new javax.swing.JSplitPane();
    splitPaneOuter = new javax.swing.JSplitPane();
    scrollpaneTreeFiles = new javax.swing.JScrollPane();
    treeFiles = new javax.swing.JTree();
    splitPaneFound = new javax.swing.JSplitPane();
    scrollPaneTableFiles = new javax.swing.JScrollPane();
    tableFiles = new javax.swing.JTable();
    scrollPaneTreeLines = new javax.swing.JScrollPane();
    treeLines = new javax.swing.JTree();
    scrollPaneErrors = new javax.swing.JScrollPane();
    treeErrors = new javax.swing.JTree();

    panelSettings.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    labelMatch.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    labelMatch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bz/filefinder/usedPictures/AddFile2.png"))); // NOI18N
    labelMatch.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    addMatch.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    addMatch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bz/filefinder/usedPictures/Add.png"))); // NOI18N
    addMatch.setToolTipText("Add Match");
    addMatch.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addMatchActionPerformed(evt);
      }
    });

    freeMatches.setEditable(true);
    freeMatches.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    freeMatches.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        freeMatchesActionPerformed(evt);
      }
    });

    usedMatches.setEditable(true);
    usedMatches.setFont(new java.awt.Font("Monospaced", 0, 12));

    delMatch.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    delMatch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bz/filefinder/usedPictures/Remove.png"))); // NOI18N
    delMatch.setToolTipText("Del Match");
    delMatch.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        delMatchActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout panelFilesLayout = new javax.swing.GroupLayout(panelFiles);
    panelFiles.setLayout(panelFilesLayout);
    panelFilesLayout.setHorizontalGroup(
      panelFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelFilesLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(labelMatch)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(freeMatches, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(addMatch)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(usedMatches, 0, 212, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(delMatch)
        .addContainerGap())
    );
    panelFilesLayout.setVerticalGroup(
      panelFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
        .addComponent(labelMatch)
        .addComponent(freeMatches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(addMatch)
        .addComponent(usedMatches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(delMatch))
    );

    labelFolder.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    labelFolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bz/filefinder/usedPictures/Folder.png"))); // NOI18N
    labelFolder.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    addFolder.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    addFolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bz/filefinder/usedPictures/Add.png"))); // NOI18N
    addFolder.setToolTipText("Add Folder");
    addFolder.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addFolderActionPerformed(evt);
      }
    });

    freeFolders.setEditable(true);
    freeFolders.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    freeFolders.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        freeFoldersActionPerformed(evt);
      }
    });

    usedFolders.setEditable(true);
    usedFolders.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N

    delFolder.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    delFolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bz/filefinder/usedPictures/Remove.png"))); // NOI18N
    delFolder.setToolTipText("Del Folder");
    delFolder.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        delFolderActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout panelFoldersLayout = new javax.swing.GroupLayout(panelFolders);
    panelFolders.setLayout(panelFoldersLayout);
    panelFoldersLayout.setHorizontalGroup(
      panelFoldersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelFoldersLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(labelFolder)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(freeFolders, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(addFolder)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(usedFolders, 0, 212, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(delFolder)
        .addContainerGap())
    );
    panelFoldersLayout.setVerticalGroup(
      panelFoldersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelFoldersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
        .addComponent(labelFolder)
        .addComponent(freeFolders, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(addFolder)
        .addComponent(usedFolders, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(delFolder))
    );

    labelWord.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    labelWord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bz/filefinder/usedPictures/AddWord2.png"))); // NOI18N
    labelWord.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    addWord.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    addWord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bz/filefinder/usedPictures/Add.png"))); // NOI18N
    addWord.setToolTipText("Add Word");
    addWord.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addWordActionPerformed(evt);
      }
    });

    freeWords.setEditable(true);
    freeWords.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    freeWords.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        freeWordsActionPerformed(evt);
      }
    });

    usedWords.setEditable(true);
    usedWords.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N

    delWord.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    delWord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bz/filefinder/usedPictures/Remove.png"))); // NOI18N
    delWord.setToolTipText("Del Word");
    delWord.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        delWordActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout panelWordsLayout = new javax.swing.GroupLayout(panelWords);
    panelWords.setLayout(panelWordsLayout);
    panelWordsLayout.setHorizontalGroup(
      panelWordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelWordsLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(labelWord)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(freeWords, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(addWord)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(usedWords, 0, 212, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(delWord)
        .addContainerGap())
    );
    panelWordsLayout.setVerticalGroup(
      panelWordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelWordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
        .addComponent(labelWord)
        .addComponent(freeWords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(addWord)
        .addComponent(usedWords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(delWord))
    );

    javax.swing.GroupLayout panelSettingsLayout = new javax.swing.GroupLayout(panelSettings);
    panelSettings.setLayout(panelSettingsLayout);
    panelSettingsLayout.setHorizontalGroup(
      panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(panelFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(panelFolders, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(panelWords, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    panelSettingsLayout.setVerticalGroup(
      panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelSettingsLayout.createSequentialGroup()
        .addComponent(panelFiles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(2, 2, 2)
        .addComponent(panelFolders, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(2, 2, 2)
        .addComponent(panelWords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(2, 2, 2))
    );

    panelSearch.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    buttonSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bz/filefinder/usedPictures/Lens.png"))); // NOI18N
    buttonSearch.setMaximumSize(new java.awt.Dimension(29, 25));
    buttonSearch.setMinimumSize(new java.awt.Dimension(29, 25));
    buttonSearch.setPreferredSize(new java.awt.Dimension(29, 25));
    buttonSearch.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/org/bz/filefinder/usedPictures/Stop2.png"))); // NOI18N
    buttonSearch.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonSearchActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout panelSearchLayout = new javax.swing.GroupLayout(panelSearch);
    panelSearch.setLayout(panelSearchLayout);
    panelSearchLayout.setHorizontalGroup(
      panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelSearchLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(buttonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jtfPath, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
        .addContainerGap())
    );
    panelSearchLayout.setVerticalGroup(
      panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
        .addComponent(buttonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(jtfPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    panelResults.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    splitPaneResults.setDividerLocation(400);
    splitPaneResults.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

    splitPaneOuter.setDividerLocation(240);

    treeFiles.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
    treeFiles.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
    scrollpaneTreeFiles.setViewportView(treeFiles);

    splitPaneOuter.setLeftComponent(scrollpaneTreeFiles);

    splitPaneFound.setDividerLocation(200);
    splitPaneFound.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

    tableFiles.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    scrollPaneTableFiles.setViewportView(tableFiles);

    splitPaneFound.setLeftComponent(scrollPaneTableFiles);

    treeLines.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
    treeLines.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
    scrollPaneTreeLines.setViewportView(treeLines);

    splitPaneFound.setRightComponent(scrollPaneTreeLines);

    splitPaneOuter.setRightComponent(splitPaneFound);

    splitPaneResults.setLeftComponent(splitPaneOuter);

    treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
    treeErrors.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
    scrollPaneErrors.setViewportView(treeErrors);

    splitPaneResults.setRightComponent(scrollPaneErrors);

    javax.swing.GroupLayout panelResultsLayout = new javax.swing.GroupLayout(panelResults);
    panelResults.setLayout(panelResultsLayout);
    panelResultsLayout.setHorizontalGroup(
      panelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(splitPaneResults)
    );
    panelResultsLayout.setVerticalGroup(
      panelResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelResultsLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(splitPaneResults)
        .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(6, 6, 6)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(panelResults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGap(6, 6, 6))
          .addGroup(layout.createSequentialGroup()
            .addComponent(panelSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())))
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(panelSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(panelSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(panelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(panelResults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

  @SuppressWarnings("unchecked")
  public void setModelUsedFolders(RulerData[] rulerData) {
    try {
      usedFolders.setModel(new DefaultComboBoxModel<>(rulerData));
    } catch (Exception ex) {
      LOGGER.log(Level.SEVERE, null, ex);
    }
  }

  @SuppressWarnings("unchecked")
  public void setModelUsedMatches(RulerData[] rulerData) {
    try {
      usedMatches.setModel(new DefaultComboBoxModel<>(rulerData));
    } catch (Exception ex) {
      LOGGER.log(Level.SEVERE, null, ex);
    }
  }

  @SuppressWarnings("unchecked")
  public void setModelUsedWords(RulerData[] rulerData) {
    try {
      usedWords.setModel(new DefaultComboBoxModel<>(rulerData));
    } catch (Exception ex) {
      LOGGER.log(Level.SEVERE, null, ex);
    }
  }

  public void addFreeFolders(String item) {
    addComboBoxItem(freeFolders, item);
  }

  public void addFreeMatches(String item) {
    addComboBoxItem(freeMatches, item);
  }

  public void addFreeWords(String item) {
    addComboBoxItem(freeWords, item);
  }

  public void insertItemUsedFolders(int index, RulerData rulerData) {
    insertComboBoxItem(usedFolders, 0, rulerData);
  }

  public void insertItemUsedMatches(int index, RulerData rulerData) {
    insertComboBoxItem(usedMatches, 0, rulerData);
  }

  public void insertItemUsedWords(int index, RulerData rulerData) {
    insertComboBoxItem(usedWords, 0, rulerData);
  }

  private void addMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMatchActionPerformed
    String filesToAdd = ((DefaultComboBoxModel) freeMatches.getModel()).getSelectedItem().toString();
    if (!filesToAdd.isEmpty()) {
      addComboBoxItem(usedMatches, filesToAdd);
    }
  }//GEN-LAST:event_addMatchActionPerformed

  private void freeMatchesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freeMatchesActionPerformed
    addComboBoxItem(freeMatches, freeMatches.getSelectedItem().toString());
    addComboBoxItem(usedMatches, freeMatches.getSelectedItem().toString());
  }//GEN-LAST:event_freeMatchesActionPerformed

  private void delMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delMatchActionPerformed
    removeComboBoxSelectedItem(usedMatches);
  }//GEN-LAST:event_delMatchActionPerformed

  private void addFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFolderActionPerformed
    JFileChooser folderChooser = new JFileChooser();
    if (usedFolders.getItemCount() > 0) {
      String lastPath = ((RulerData) usedFolders.getItemAt(0)).getText();
      String parentLastPath = lastPath.substring(0, lastPath.lastIndexOf(FS));
      folderChooser.setCurrentDirectory(new File(parentLastPath));
    }
    folderChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    folderChooser.setAcceptAllFileFilterUsed(false);
    if (folderChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
      addComboBoxItem(usedFolders, folderChooser.getSelectedFile().getPath());
      addComboBoxItem(freeFolders, folderChooser.getSelectedFile().getPath());
    }
  }//GEN-LAST:event_addFolderActionPerformed

  private void freeFoldersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freeFoldersActionPerformed
    addComboBoxItem(freeFolders, freeFolders.getSelectedItem().toString());
    addComboBoxItem(usedFolders, freeFolders.getSelectedItem().toString());
  }//GEN-LAST:event_freeFoldersActionPerformed

  private void delFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delFolderActionPerformed
    removeComboBoxSelectedItem(usedFolders);
  }//GEN-LAST:event_delFolderActionPerformed

  private void addWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addWordActionPerformed
    String wordToAdd = ((DefaultComboBoxModel) freeWords.getModel()).getSelectedItem().toString();
    if (!wordToAdd.isEmpty()) {
      addComboBoxItem(usedWords, wordToAdd);
    }
  }//GEN-LAST:event_addWordActionPerformed

  private void delWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delWordActionPerformed
    removeComboBoxSelectedItem(usedWords);
  }//GEN-LAST:event_delWordActionPerformed

  private void freeWordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freeWordsActionPerformed
    addComboBoxItem(freeWords, freeWords.getSelectedItem().toString());
    addComboBoxItem(usedWords, freeWords.getSelectedItem().toString());
  }//GEN-LAST:event_freeWordsActionPerformed

  private void buttonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchActionPerformed
    try {
      if (buttonSearch.isSelected()) {
        executeSearch();
      } else {
        searcher.setRunningSearch(false);
      }
    } catch (Exception ex) {
      addExceptionToTree(ex, Paths.get(ex.getMessage()));
      LOGGER.log(Level.SEVERE, null, ex);
    }
  }//GEN-LAST:event_buttonSearchActionPerformed

  private void executeSearch() {
    swSearcher = new SwingWorkerSearcher();
    swSearcher.execute();
  }

  public void notifyProgess(String name) {
    jtfPath.setText(name);
  }

  public String getCanonicalPath(Path path) {
    try {
      return path.toFile().getCanonicalPath();
    } catch (Exception e) {
      try {
        LOGGER.log(Level.INFO, "getCanonicalPath({0})", new Object[]{path});
        return path.normalize().toString();
      } catch (Exception e2) {
        throw e2;
      }
    }
  }

  public String getCanonicalPath(File file) {
    return getCanonicalPath(file.toPath());
  }

  public void addExceptionToTree(Exception ex, Path path) {
    try {
      addExceptionToTree(ex.getClass().getSimpleName(), getCanonicalPath(path));
      LOGGER.log(Level.INFO, "{0} for: {1}", new Object[]{ex.getClass().getSimpleName(), getCanonicalPath(path)});
    } catch (Exception ex2) {
      LOGGER.log(Level.SEVERE, null, ex2);
    }
  }

  private void addExceptionToTree(String exception, String path) {
    DefaultTreeModel treeModel = ((DefaultTreeModel) treeErrors.getModel());
    DefaultMutableTreeNode rootTreeNode = (DefaultMutableTreeNode) treeModel.getRoot();
    DefaultMutableTreeNode exceptionTreeNode = getDefaultMutableTreeNode(rootTreeNode, exception, true);
    getDefaultMutableTreeNode(exceptionTreeNode, path, false);
    treeModel.reload(rootTreeNode);
  }

  public void addPathToNodeTrees(String canonicalFolder, Path path, RulerData[] words) throws Exception {
    String canonicalFilename = getCanonicalPath(path);
    addPathToTreeFiles(canonicalFolder, canonicalFilename);
    addPathToTreeLines(canonicalFolder, path, words);
    addPathToTable(path, tableFiles);
  }

  private void addPathToTreeFiles(String canonicalFolder, String canonicalFilename) throws Exception {
    String filename;
    String canonicalPaths;
    try {
      DefaultTreeModel treeModel = ((DefaultTreeModel) treeFiles.getModel());
      DefaultMutableTreeNode rootTreeNode = (DefaultMutableTreeNode) treeModel.getRoot();
      DefaultMutableTreeNode folderTreeNode = getDefaultMutableTreeNode(rootTreeNode, canonicalFolder, true);
      int lastFS = canonicalFilename.lastIndexOf(FS);
      filename = canonicalFilename.substring(lastFS + 1);
      canonicalPaths = canonicalFilename.substring(0, lastFS + 1).substring(canonicalFolder.length());
      if (canonicalPaths.startsWith(FS)) {
        canonicalPaths = canonicalPaths.substring(FS.length());
      }
      String[] recursivePaths = canonicalPaths.split(MainClass.isWindows() ? (FS + FS) : FS);
      DefaultMutableTreeNode pathTreeNode = folderTreeNode;
      for (String recursivePath : recursivePaths) {
        pathTreeNode = getDefaultMutableTreeNode(pathTreeNode, recursivePath, true);
      }
      getDefaultMutableTreeNode(pathTreeNode, filename, false);
      treeModel.reload(rootTreeNode);
    } catch (Exception e) {
      throw e;
    }
  }

  private void addPathToTreeLines(String canonicalFolder, Path path, RulerData[] words) {
    try {

      File file = path.toFile();
      if (file != null) {
        DefaultTreeModel treeModel = ((DefaultTreeModel) treeLines.getModel());
        DefaultMutableTreeNode rootTreeNode = (DefaultMutableTreeNode) treeModel.getRoot();

        if (rootTreeNode != null) {

          DefaultMutableTreeNode fileTreeNode = new DefaultMutableTreeNode(file.getCanonicalPath(), true);

          CharsetDecoder dec = StandardCharsets.UTF_8.newDecoder()
              .onMalformedInput(CodingErrorAction.IGNORE);
          try (Reader r = Channels.newReader(FileChannel.open(path), dec, -1);
              LineNumberReader lnr = new LineNumberReader(r)) {
            String line;
            while ((line = lnr.readLine()) != null) {
              for (RulerData word : words) {
                if (line.contains(word.getText())) {
                  int initialFind = 0;
                  int position;
                  do {
                    position = line.indexOf(word.getText(), initialFind);
                    initialFind = position + 1;
                    if (position > 0) {
                      String indicator = new StringBuilder("Line ")
                          .append(getStringPaddedL(' ', 6, String.valueOf(lnr.getLineNumber())))
                          .append(":")
                          .append(getStringPaddedR(' ', 6, String.valueOf(position)))
                          .toString();
                      String before = line.substring(0, position);
                      String after = line.substring(position + word.getText().length(),
                          line.length());
                      
                      DecoratedText[] arrayLine = new DecoratedText[]{
                        new DecoratedText(indicator, redColor, monoPlain12),
                        new DecoratedText(before, blueColor, monoPlain12),
                        new DecoratedText(word.getText(), greenColor, monoBold12),
                        new DecoratedText(after, blueColor, monoPlain12)
                      };
                      fileTreeNode.add(new DecoratedTextMutableTreeNode(arrayLine, false));
                    }
                  } while (position != -1);
                }
              }
            }
          } catch (Exception ex) {
            addExceptionToTree(ex, path);
          }
          DefaultMutableTreeNode folderTreeNode = getDefaultMutableTreeNode(rootTreeNode, canonicalFolder, true);
          folderTreeNode.add(fileTreeNode);
          treeModel.reload(rootTreeNode);
        }
      }
    } catch (IOException ex) {
      addExceptionToTree(ex, path);
    }
  }

  private void addPathToTable(Path path, JTable table) {
    File file = path.toFile();
    Instant instant = Instant.ofEpochMilli(file.lastModified());
    ZoneId zoneId = ZoneId.systemDefault();
    LocalDateTime localDateTime = LocalDateTime.ofInstant(instant, zoneId);
    Date dateFile = Date.from(localDateTime.atZone(zoneId).toInstant());
    try {
      ((DefaultTableModel) table.getModel()).addRow(new Object[]{
        file.getCanonicalFile().getParent(),
        file.getName(),
        new SimpleDateFormat("yyyy-MM-dd, HH:mm:ss").format(Date.from(instant)),
        //localDateTime,
        //Files.probeContentType(path),
        //new MimetypesFileTypeMap().getContentType(file.getName()),
        //file.length()
        humanReadableByteCount(file.length(), true)
      });
    } catch (IOException ex) {
      LOGGER.log(Level.SEVERE, null, ex);
    }
  }

  private DefaultMutableTreeNode getDefaultMutableTreeNode(DefaultMutableTreeNode parent, String newChild, Boolean isLeaf) {
    if (parent != null) {
      DefaultMutableTreeNode child;
      for (int i = 0; i < parent.getChildCount(); i++) {
        child = (DefaultMutableTreeNode) parent.getChildAt(i);
        if (child.toString().equals(newChild)) {
          return child;
        }
      }
      child = new DefaultMutableTreeNode(newChild, isLeaf);
      parent.add(child);
      return child;

      /*
      NOT WORKING Properly
      DefaultMutableTreeNode nodeChild = new DefaultMutableTreeNode(newChild, isLeaf);
      if (!parent.isNodeChild(nodeChild)) {
        parent.add(nodeChild);
      }
      return nodeChild;
       */
    } else {
      return null;
    }
  }

  private void expandAllNodes(JTree tree, int ini, int rows) {
    try {
      if (tree != null) {
        for (int i = ini; i < rows; ++i) {
          tree.expandRow(i);
          //tree.collapseRow(i);
        }

        if (tree.getRowCount() != rows) {
          expandAllNodes(tree, rows, tree.getRowCount());
        }
      }
    } catch (ArrayIndexOutOfBoundsException ex) {
      LOGGER.log(Level.INFO, "ArrayIndexOutOfBoundsException: {0}", ex.getMessage());
    } catch (Exception ex) {
      LOGGER.log(Level.INFO, "Exception: {0}", ex.getMessage());
    }
  }

  private void reloadTree(JTree tree) {
    DefaultTreeModel treeModel = ((DefaultTreeModel) tree.getModel());
    DefaultMutableTreeNode rootTreeNode = (DefaultMutableTreeNode) treeModel.getRoot();
    treeModel.reload(rootTreeNode);
  }

  private void setRootTreeModel(JTree tree, Object root) {
    DefaultMutableTreeNode rootTreeNode = new DefaultMutableTreeNode(root);
    DefaultTreeModel treeModel = ((DefaultTreeModel) tree.getModel());
    treeModel.setRoot(rootTreeNode);
  }

  private void removeAllTreeNodes(JTree tree) {
    DefaultMutableTreeNode rootTreeNode = (DefaultMutableTreeNode) tree.getModel().getRoot();
    if (rootTreeNode != null) {
      rootTreeNode.removeAllChildren();
    }
    reloadTree(tree);
  }

  @SuppressWarnings({"unchecked"})
  private <T> List<T> getComboBoxItems(JComboBox comboBox) {
    if (comboBox != null) {
      List<String> list = new ArrayList<>();
      for (int i = 0; i < comboBox.getItemCount(); i++) {
        list.add(comboBox.getItemAt(i).toString());
      }
      return (List<T>) list;//(ArrayList<T>)list; // list; // (List<T>)list;
    }
    return null;
  }

  @SuppressWarnings({"unchecked"})
  public List<RulerData> getComboBoxEnableItems(RulerComboBox comboBox) {
    if (comboBox != null) {
      List<RulerData> list = new ArrayList<>();
      for (int i = 0; i < comboBox.getItemCount(); i++) {
        RulerData rulerData = (RulerData) comboBox.getItemAt(i);
        if (rulerData.getEnabled() == true) {
          list.add(rulerData);
        }
      }
      return list;
    }
    return null;
  }

  @SuppressWarnings({"unchecked"})
  public void addComboBoxItem(JComboBox comboBox, String item) {
    if (item.replaceAll(" ", "").length() == 0) { // Non Valid item 
      return;
    }
    DefaultComboBoxModel model = (DefaultComboBoxModel) comboBox.getModel();
    if (comboBox instanceof RulerComboBox) {
      RulerComboBox rulerComboBox = (RulerComboBox) comboBox;
      if (rulerComboBox.getIndexOf(item) == -1) {
        model.insertElementAt(new RulerData(true, true, item), 0);
        comboBox.setSelectedIndex(0);
      }
    } else {
      if (model.getIndexOf(item) == -1) {
        model.insertElementAt(item, 0);
        comboBox.setSelectedIndex(0);
      }
    }
  }

  @SuppressWarnings({"unchecked"})
  public void insertComboBoxItem(RulerComboBox comboBox, int index, RulerData rulerData) {
    if (rulerData.getText().replaceAll(" ", "").length() == 0) { // Non Valid item 
      return;
    }
    DefaultComboBoxModel model = (DefaultComboBoxModel) comboBox.getModel();
    if (comboBox.getIndexOf(rulerData.getText()) == -1) {
      model.insertElementAt(rulerData, index);
      comboBox.setSelectedIndex(0);
    }
  }

  @SuppressWarnings({"unchecked"})
  public void insertComboBoxItem(RulerComboBox comboBox, RulerData rulerData) {
    insertComboBoxItem(comboBox, 0, rulerData);
  }

  private void removeComboBoxSelectedItem(RulerComboBox comboBox) {
    DefaultComboBoxModel model = (DefaultComboBoxModel) comboBox.getModel();
    if (model.getSize() > 0) {
      int lastIndex = comboBox.getLastValidIndex();
      model.removeElement(model.getElementAt(lastIndex));
      if (lastIndex < model.getSize()) {
        model.setSelectedItem(model.getElementAt(lastIndex));
      } else {
        if (model.getSize() > 0) {
          model.setSelectedItem(model.getElementAt(lastIndex - 1));
        }
      }
    }
  }

  private void removeComboBoxSelectedItem(JComboBox comboBox) {
    DefaultComboBoxModel model = (DefaultComboBoxModel) comboBox.getModel();
    if (model.getSize() > 0) {
      model.removeElement(model.getSelectedItem());
    }
  }

  private String humanReadableByteCount(long bytes, boolean si) {
    int unit = si ? 1000 : 1024;
    if (bytes < unit) {
      return bytes + " B";
    }
    int exp = (int) (Math.log(bytes) / Math.log(unit));
    String pre = (si ? "KMGTPE" : "KMGTPE").charAt(exp - 1) + (si ? "" : "i");
    return String.format("%.1f %sB", bytes / Math.pow(unit, exp), pre);
  }

  private void printExceptionInfo(final Throwable cause) {
    Throwable rootCause = cause;
    while (rootCause.getCause() != null && rootCause.getCause() != rootCause) {
      rootCause = rootCause.getCause();
    }
    System.out.println(
        "In the Line:" + rootCause.getStackTrace()[0].getLineNumber()
        + " of the Method:" + rootCause.getStackTrace()[0].getMethodName()
        + ", Class:" + rootCause.getStackTrace()[0].getClassName()
        + " was presented the Exception:\n\t" + rootCause.toString());
  }

  public static String getPadded(char c, int p, String s) {
    //Return a String filled character 'c' characters with (p s.length()) length 
    char[] chars = new char[p - s.length()];
    Arrays.fill(chars, c);
    return new String(chars);
  }

  public static String getStringPaddedL(char c, int p, String s) {
    return getPadded(c, p, s) + s;
  }

  public static String getStringPaddedR(char c, int p, String s) {
    return s + getPadded(c, p, s);
  }

  class SwingWorkerSearcher extends SwingWorker<Void, SearchDTO> {
    //https://www.javacodegeeks.com/2012/12/multi-threading-in-java-swing-with-swingworker.html

    RulerData[] words = getComboBoxEnableItems(usedWords).toArray(new RulerData[0]);
    RulerData[] matches = getComboBoxEnableItems(usedMatches).toArray(new RulerData[0]);
    RulerData[] folders = getComboBoxEnableItems(usedFolders).toArray(new RulerData[0]);

    @Override
    protected Void doInBackground() throws Exception {

      removeAllTreeNodes(treeFiles);
      removeAllTreeNodes(treeLines);
      removeAllTreeNodes(treeErrors);

      tableFiles.setModel(INITIAL_TABLE_MODEL);
      INITIAL_TABLE_MODEL.setRowCount(0);
      ((DefaultTableModel) tableFiles.getModel()).setRowCount(0);
      //setRootTreeModel(treeErrors, new DefaultMutableTreeNode(""));
      //treeLines.setCellRenderer(new TextPaneDefaultTreeCellRenderer());
      treeLines.setCellRenderer(new TreeCellRendererTextPane());
      searcher.setSwingWorkerSearcher(this);
      jtfPath.setEnabled(true);
      searcher.setRunningSearch(true);

      System.out.println("iterativeSearch.INI");
      searcher.iterativeSearch(folders, matches, words);
      return null;
    }

    @Override
    protected void done() {
      reloadTree(treeLines);
      expandAllNodes(treeFiles, 0, treeFiles.getRowCount());
      //expandAllNodes(treeLines, 0, treeLines.getRowCount());
      //searcher.setRunningSearch(false); //It is needed?
      System.out.println("iterativeSearch.END");
      jtfPath.setText("");
      jtfPath.setEnabled(false);
      buttonSearch.setSelected(false);
    }

    @Override
    protected void process(List<SearchDTO> chunks) {

      for (final SearchDTO chunk : chunks) {
        switch (chunk.getType()) {
          case SearchDTO.FILENAME:
            notifyProgess(chunk.getFilename());
            break;
          case SearchDTO.EXCEPTION:
            addExceptionToTree(chunk.getException(), chunk.getPath());
            break;
          case SearchDTO.PATH:
            try {
              addPathToNodeTrees(chunk.getCanonicalPath(), chunk.getPath(), chunk.getWords());
            } catch (Exception ex) {
              Logger.getLogger(OneSearch.class.getName()).log(Level.SEVERE, null, ex);
            }
            break;
        }
      }

    }

    public void callPublish(SearchDTO searchDTO) {
      publish(searchDTO);
    }
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton addFolder;
  private javax.swing.JButton addMatch;
  private javax.swing.JButton addWord;
  private javax.swing.JToggleButton buttonSearch;
  private javax.swing.JButton delFolder;
  private javax.swing.JButton delMatch;
  private javax.swing.JButton delWord;
  private javax.swing.JComboBox<String> freeFolders;
  private javax.swing.JComboBox<String> freeMatches;
  private javax.swing.JComboBox<String> freeWords;
  private javax.swing.JTextField jtfPath;
  private javax.swing.JLabel labelFolder;
  private javax.swing.JLabel labelMatch;
  private javax.swing.JLabel labelWord;
  private javax.swing.JPanel panelFiles;
  private javax.swing.JPanel panelFolders;
  private javax.swing.JPanel panelResults;
  private javax.swing.JPanel panelSearch;
  private javax.swing.JPanel panelSettings;
  private javax.swing.JPanel panelWords;
  private javax.swing.JScrollPane scrollPaneErrors;
  private javax.swing.JScrollPane scrollPaneTableFiles;
  private javax.swing.JScrollPane scrollPaneTreeLines;
  private javax.swing.JScrollPane scrollpaneTreeFiles;
  private javax.swing.JSplitPane splitPaneFound;
  private javax.swing.JSplitPane splitPaneOuter;
  private javax.swing.JSplitPane splitPaneResults;
  private javax.swing.JTable tableFiles;
  private javax.swing.JTree treeErrors;
  private javax.swing.JTree treeFiles;
  private javax.swing.JTree treeLines;
  // End of variables declaration//GEN-END:variables
}
